[{"C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\index.tsx":"1","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\App.tsx":"3","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\MovieAPI.ts":"4","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\MoviePage.tsx":"5","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\MoviePageScore.tsx":"6","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\SearchBar.tsx":"7","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\MyList.tsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1584,"mtime":1608471015393,"results":"12","hashOfConfig":"10"},{"size":512,"mtime":1608327734302,"results":"13","hashOfConfig":"10"},{"size":2687,"mtime":1608472430669,"results":"14","hashOfConfig":"10"},{"size":1718,"mtime":1608375658724,"results":"15","hashOfConfig":"10"},{"size":3125,"mtime":1608470975445,"results":"16","hashOfConfig":"10"},{"size":820,"mtime":1608471416798,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1he40w9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\index.tsx",[],["40","41"],"C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\App.tsx",["42","43","44","45"],"import './App.css';\nimport { SearchBar } from \"./SearchBar\";\n\nimport {GenerateMoviePage} from \"./MoviePage\";\nimport { useEffect, useState } from 'react';\nimport homelogo from \"./home.svg\";\nimport { MyList } from \"./MyList\";\nimport { clear } from 'console';\n// api key 1beb6cab\n\nfunction EnteryPage(params:any) {\n  \n\nreturn(\n\n  <div className=\"enterypage-container\">\n    <div className=\"show-my-list\" onClick={()=>params.SP(2)}>Show My List</div>\n    <div>Welcome to my educational project.</div>\n    <div>You can search movies from searchbar above.</div>\n    <div className=\"fill-up-div\"></div>\n  </div>\n\n\n\n);\n\n\n}\n\n\n\n\n\n\nfunction App() {\n \n  const [PageID,SetPageID] = useState(\"\");\n  const [showPage,setShowPage] = useState(1);\n  const [clearSearchbar,ClearSB] = useState(false);\n  const [CloseSuggestions,CloseSG] = useState(false);\n  \n  useEffect(()=>{\n    if (PageID !== \"\") {\n      setShowPage(0);\n    }\n\n\n\n  },[PageID]);\n\n  \n\n  \n  \n  \n\n  return (\n    <div className=\"App\">\n      <button  className=\"return-home\" onClick={()=>{setShowPage(1); ClearSB(!clearSearchbar); CloseSG(!CloseSuggestions); }}>\n        <img src={homelogo} alt=\"\" />\n      </button>\n      <SearchBar SP = {setShowPage} onIDChange={(id:string)=>SetPageID(id)} Clear={clearSearchbar} CloseSuggestions={CloseSuggestions}/>      \n      {showPage == 0 && <GenerateMoviePage forMyList={false} id={PageID} /> }\n      {showPage == 1 && <EnteryPage SP={setShowPage}/>}\n      {showPage == 2 && <MyList/>}\n\n\n\n    <div className=\"author-name\">Made by Osman Aslancan</div>\n    </div>\n\n\n\n\n    \n  );\n}\n\nexport default App;\n","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\MovieAPI.ts",[],"C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\MoviePage.tsx",["46","47","48","49"],"import { strict } from 'assert';\r\nimport { debug } from 'console';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { RequestSeries } from \"./MovieAPI\";\r\nimport { ScoreList } from \"./MoviePageScore\";\r\n\r\nclass Scores {\r\n  public Source: string = \"\"; \r\n  public Value: string = \"\";\r\n}\r\n\r\nclass APIdata {\r\n  public Title: string = \"\";\r\n  public Poster: string = \"\";\r\n  public Plot: string = \"\";\r\n  public Year: string = \"\";\r\n  public Runtime: string = \"\";\r\n  public Genre: string = \"\";\r\n  public Director: string = \"\";\r\n  public Ratings: Scores[] = [new Scores(),new Scores(),new Scores()];\r\n  public imdbVotes = \"\"; \r\n  public imdbID = \"\"; \r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function GenerateMoviePage(props:any) {\r\n    \r\n  \r\n  let [data, setData] = useState(new APIdata());\r\n  let [userData,setUserData]= useState<Array<string>>(JSON.parse(localStorage.getItem(\"UserData\") as string));\r\n  \r\n  useEffect(()=>{\r\n\r\n    RequestSeries(props.id, true, false).then((res: APIdata) => { setData(res) });\r\n    setUserData(JSON.parse(localStorage.getItem(\"UserData\") as string));\r\n\r\n  },[props.id]);\r\n  \r\n  \r\n  useEffect(()=>{\r\n\r\n  setUserData(JSON.parse(localStorage.getItem(\"UserData\") as string));\r\n    \r\n\r\n\r\n  },[]);\r\n  \r\n  useEffect(()=>{\r\n\r\n\r\n  localStorage.setItem(\"UserData\",JSON.stringify(userData));\r\n  \r\n\r\n\r\n  },[userData]);\r\n  \r\n  \r\n  \r\n    \r\n  \r\n  \r\n \r\n    \r\n    return (\r\n      \r\n      <div className=\"movie-page-container\">\r\n\r\n      <header className=\"movie-title\">\r\n        <h1>\r\n          {data.Title}\r\n        </h1>\r\n      </header>\r\n      <div className=\"main-content\">\r\n\r\n        <img src={data.Poster}  alt=\"\" onClick={()=> window.open(`https://www.imdb.com/title/${data.imdbID}`, \"_blank\")} />\r\n     \r\n        <div className=\"plot\">{data.Plot}</div>\r\n        <div className=\"plot\">{data.Genre}</div>\r\n        <div className=\"plot\">{data.Year} {data.Runtime}</div>\r\n        {data.Director !== \"N/A\" && <div className=\"plot\"> {data.Director}</div>}\r\n        <ScoreList List={data.Ratings} imdbVotes={data.imdbVotes} imdbID={data.imdbID}/>\r\n        { props.forMyList == false &&\r\n        <div onClick={()=> {let Samedata = false;\r\n        if(userData != null && userData.length > 0)\r\n        {\r\n          userData.forEach(element => {\r\n            if (element == data.imdbID) {\r\n              Samedata = true;\r\n            }\r\n          });\r\n        }\r\n        else\r\n        {\r\n          setUserData([]);\r\n        }\r\n        \r\n        if (!Samedata) {\r\n          let temp = [data.imdbID].concat(userData); setUserData(temp)\r\n        } }} className=\"add-to-list-button\">Add to my list</div>\r\n        }\r\n        </div>\r\n\r\n    </div>\r\n    );\r\n\r\n    \r\n\r\n\r\n\r\n\r\n}\r\n\r\n","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\MoviePageScore.tsx",[],["50","51"],"C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\SearchBar.tsx",["52","53","54"],"import { useEffect, useState } from \"react\";\r\nimport { SearchDB } from \"./MovieAPI\";\r\nimport searchicon from \"./searchicon.svg\";\r\nimport { debounce } from \"debounce\";\r\nimport React from \"react\";\r\n\r\nclass SearchBarItem {\r\n\r\n    public Title = \"\";\r\n    public Year = \"\";\r\n    public imdbID = \"\";\r\n    public Type = \"\";\r\n    public Poster = \"\";\r\n\r\n}\r\n\r\n\r\nclass SearchAPI {\r\n\r\n    public Response = \"\";\r\n    public totalResults = \"\";\r\n    public Search: SearchBarItem[] = [];\r\n    public Error = \"\";\r\n\r\n}\r\n\r\nfunction CreateSearchResults(array: SearchBarItem[], Show: any = true, onIDChange: any, SP:any) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    let result: JSX.Element[] = [];\r\n\r\n    array.forEach((element: SearchBarItem) => {\r\n\r\n        result.push(\r\n            <div className=\"search-bar-item\" onClick={() => { onIDChange(element.imdbID); SP(0); Show(false) }}>\r\n                <img src={element.Poster !== \"N/A\" ? element.Poster : \"https://m.media-amazon.com/images/G/01/imdb/images/nopicture/32x44/film-3119741174._CB468665901_.png\"} alt=\"\" />\r\n                <div className=\"search-item-info\">\r\n\r\n                    <div>{element.Title}</div>\r\n                    <div>{element.Year}</div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        );\r\n\r\n\r\n\r\n    });\r\n\r\n    return result;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function SearchBar(params: any) {\r\n\r\n\r\n    const [searchdata, setdata] = useState(new SearchAPI());\r\n    const [searchResults, setResults] = useState<JSX.Element[]>();\r\n    const [showResults, setShow] = useState(false);\r\n    const [searchvalue,setValue] = useState(\"\");\r\n    const SearchbarRef = React.createRef<HTMLInputElement>();\r\n    function Search(ev: React.KeyboardEvent<HTMLInputElement>) {\r\n\r\n\r\n       \r\n        \r\n\r\n            if ((ev.target as HTMLInputElement).value.length > 3) {\r\n\r\n                SearchDB((ev.target as HTMLInputElement).value).then(res => { setdata(res) });\r\n\r\n            }\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        setValue(\"\");\r\n        \r\n\r\n    },[params.Clear]);\r\n\r\n    useEffect(() => {\r\n        if (searchdata == undefined) {\r\n            \r\n        }\r\n        else if (searchdata.Response === \"True\") {\r\n            setResults(CreateSearchResults(searchdata.Search, setShow, params.onIDChange,params.SP));\r\n            setShow(true);\r\n        }\r\n        else if (searchdata.Response === \"False\") {\r\n            console.log(searchdata.Error);\r\n\r\n        }\r\n    }, [searchdata]);\r\n\r\n    useEffect(()=>{\r\n\r\n        setShow(false);\r\n\r\n\r\n    },[params.CloseSuggestions]);\r\n    \r\n\r\n    return (\r\n        <div className=\"search-module\">\r\n            <div className=\"search-bar-wrapper\">\r\n\r\n                <input className=\"search-bar\" ref={SearchbarRef} value={searchvalue} onKeyDown={(e)=>  {if (e.key === \"Escape\")setShow(false)} } onChange={(e)=>setValue(e.target.value)} type=\"text\" placeholder=\"Search for movies/series\" onInput={debounce((ev: any) => {Search(ev)}, 1000)} />\r\n                \r\n            </div>\r\n            <div className=\"results\">\r\n                {showResults && searchResults}\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}","C:\\Users\\OSMAN\\Desktop\\ReactOsman\\my-app\\src\\MyList.tsx",["55"],"import { useState } from \"react\";\r\nimport {GenerateMoviePage} from \"./MoviePage\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function MyList(params:any) {\r\n    \r\n\r\n    \r\n\r\n\r\n    let RawData = localStorage.getItem(\"UserData\") as string;\r\n\r\n    \r\n\r\n    \r\n    let UserData = JSON.parse(RawData) as string[];\r\n\r\n    if (UserData == null || UserData.length < 1) {\r\n        console.log(\"List is null\");\r\n        return(\r\n            <div className=\"empty-list\">\r\n              <p className=\"plot\">  Your list is empty. </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n\r\n        <div>\r\n            {UserData.map((el)=>\r\n            {\r\n                return(\r\n\r\n                    <GenerateMoviePage id={el} forMyList={true}/>\r\n                    \r\n\r\n                );\r\n            })}\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n    \r\n\r\n\r\n\r\n\r\n}",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":8,"column":10,"nodeType":"62","messageId":"63","endLine":8,"endColumn":15},{"ruleId":"64","severity":1,"message":"65","line":63,"column":17,"nodeType":"66","messageId":"67","endLine":63,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":64,"column":17,"nodeType":"66","messageId":"67","endLine":64,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":65,"column":17,"nodeType":"66","messageId":"67","endLine":65,"endColumn":19},{"ruleId":"60","severity":1,"message":"68","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":16},{"ruleId":"60","severity":1,"message":"69","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":15},{"ruleId":"64","severity":1,"message":"65","line":86,"column":27,"nodeType":"66","messageId":"67","endLine":86,"endColumn":29},{"ruleId":"64","severity":1,"message":"65","line":91,"column":25,"nodeType":"66","messageId":"67","endLine":91,"endColumn":27},{"ruleId":"56","replacedBy":"70"},{"ruleId":"58","replacedBy":"71"},{"ruleId":"60","severity":1,"message":"72","line":3,"column":8,"nodeType":"62","messageId":"63","endLine":3,"endColumn":18},{"ruleId":"64","severity":1,"message":"65","line":107,"column":24,"nodeType":"66","messageId":"67","endLine":107,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":118,"column":8,"nodeType":"75","endLine":118,"endColumn":20,"suggestions":"76"},{"ruleId":"60","severity":1,"message":"77","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":18},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"@typescript-eslint/no-unused-vars","'clear' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'strict' is defined but never used.","'debug' is defined but never used.",["78"],["79"],"'searchicon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'params.SP' and 'params.onIDChange'. Either include them or remove the dependency array. If 'setResults' needs the current value of 'params.onIDChange', you can also switch to useReducer instead of useState and read 'params.onIDChange' in the reducer.","ArrayExpression",["80"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [params.SP, params.onIDChange, searchdata]",{"range":"83","text":"84"},[2434,2446],"[params.SP, params.onIDChange, searchdata]"]